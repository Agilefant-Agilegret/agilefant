<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>
  
  <package name="ajax" namespace="/ajax" extends="default">
    
    <result-types>
      <!-- JSON result type -->
      <result-type name="json" default="true" class="code.google.struts2jsonresult.JSONResult">
        <param name="prettyPrint">true</param>
        <param name="out.noCache">true</param>
      </result-type>
    </result-types>
    
    <!-- Interceptors -->
    <interceptors>
      <interceptor name="refreshUser" class="refreshUserInterceptor" />
      <interceptor name="prefetch" class="prefetchInterceptor" />
      <interceptor name="settings"	class="settingsInterceptor" />
      
      <interceptor-stack name="authenticationStack">
        <interceptor-ref name="exception" />
        <interceptor-ref name="completeStack" />
        <interceptor-ref name="refreshUser" />
        <interceptor-ref name="settings" />
       <interceptor-ref name="validation">
          <param name="validateAnnotatedMethodOnly">true</param>
      </interceptor-ref>
        
      </interceptor-stack>
      
      <interceptor-stack name="prefetchStack">
        <interceptor-ref name="exception" />
        <interceptor-ref name="prefetch" />
        <interceptor-ref name="completeStack" />
        <interceptor-ref name="refreshUser" />
        <interceptor-ref name="settings" />
        <interceptor-ref name="validation">
          <param name="validateAnnotatedMethodOnly">true</param>
      </interceptor-ref>
      </interceptor-stack>
      
      <interceptor-stack name="preparedStack">
        <interceptor-ref name="exception" />
        <interceptor-ref name="params" />
        <interceptor-ref name="prepare" />
        <interceptor-ref name="completeStack" />
        <interceptor-ref name="refreshUser" />
        <interceptor-ref name="settings" />
        <interceptor-ref name="validation">
          <param name="validateAnnotatedMethodOnly">true</param>
      </interceptor-ref>
      </interceptor-stack>
    </interceptors>
    
    <default-interceptor-ref name="authenticationStack" />

    <global-results>
      <result name="input" type="json">
        <param name="out.statusCode">500</param>
        <param name="target">fieldErrors</param>
      </result>
      <result name="ajaxException" type="chain">
        <param name="actionName">ajaxExceptionHandler</param>
      </result>
    </global-results>

    <!-- AJAX exceptions -->
    <global-exception-mappings>
      <exception-mapping result="ajaxException"
        exception="fi.hut.soberit.agilefant.exception.ObjectNotFoundException" />
      <exception-mapping result="ajaxException"
        exception="java.lang.IllegalArgumentException" />
      <exception-mapping result="ajaxException"
        exception="java.lang.RuntimeException" />         
    </global-exception-mappings>
    
    <action name="ajaxExceptionHandler" class="ajaxExceptionHandler" method="handle">
      <result name="objectNotFound" type="json">
        <param name="out.statusCode">404</param>
        <param name="patterns">+errorMessage, +trace, -*</param>
      </result>
      <result name="conflict" type="json">
        <param name="out.statusCode">409</param>
        <param name="patterns">+errorMessage, +trace, -*</param>
      </result>
      <result name="input" type="json">
        <param name="out.statusCode">500</param>
        <param name="patterns">+errorMessage, +trace, -*</param>
      </result>
      <result name="genericException" type="json">
        <param name="out.statusCode">500</param>
        <param name="patterns">+errorMessage, +trace, -*</param>
      </result>
    </action>
    
    
    <!-- AJAX actions -->
    
    
    <!-- Menu actions -->
    <action name="menuData" method="constructBacklogMenuData" class="menuAction">
        <result type="json">
          <param name="target">menuData</param>
          <param name="patterns">-class, -*.class, -*.*.class</param>
        </result>
    </action>
    <action name="updateOpenMenus" method="updateOpenMenus" class="menuAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    <action name="myAssignmentsMenuData" method="constructAssignmentData" class="menuAction">
        <result type="json">
          <param name="target">assignmentData</param>
          <param name="patterns">-class, -*.class, -*.*.class</param>
        </result>
    </action>
    <!-- /Menu actions -->



		<!-- Backlog actions -->
		
		<action name="retrieveRankedStories" class="storyListAction"
			method="rankedStoriesByContext">
			<result name="success" type="json">
				<param name="target">stories</param>
        <param name="patterns">+id, +rank, +class, -*</param>
			</result>
		</action>
    <action name="retrieveBacklog" method="retrieve" class="backlogAction">
      <result name="success" type="json">
        <param name="target">backlog</param>
        <param name="patterns"></param>
      </result>
    </action>
    
    <action name="retrieveStories" method="retrieveStories" class="backlogAction">
      <result name="success" type="json">
        <param name="target">stories</param>
      </result>
    </action>
    
    <action name="retrieveSubBacklogs" method="retrieveSubBacklogs" class="backlogAction">
      <result name="success" type="json">
        <param name="target">backlogs</param>
      </result>
    </action>
    
    <action name="addAssignees" method="addAssignees" class="backlogAction">
      <result name="success" type="json">
        <param name="target">backlog</param>
        <param name="patterns">+assignments, +assignments.user.id</param>
      </result>
    </action>
    
    <!-- /Backlog actions -->
    
    
    
    <!-- Product actions -->
    <action name="createProduct" method="create" class="productAction">
      <result type="dispatcher">/WEB-INF/jsp/forms/createProduct.jsp</result>
    </action>
    
    <action name="retrieveProduct" method="retrieve" class="productAction">
      <result name="success" type="json">
        <param name="target">product</param>
        <param name="patterns">-stories, -projects, -children</param>
      </result>
    </action>
    
   <action name="retrieveProductProjects" method="retrieveProjects" class="productAction">
      <result name="success" type="json">
        <param name="target">childBacklogs</param>
        <param name="patterns">-stories, -children, +assignees.id, +assignees.class, +assignees.initials, -assignees.*</param>
      </result>
    </action>
    
    <action name="retrieveAllProducts" method="retrieveAll" class="productAction">
      <result name="success" type="json">
        <param name="target">products</param>
      </result>
    </action>
    
    <action name="storeProduct" method="store" class="productAction">
      <interceptor-ref name="prefetchStack"/>
      <result name="success" type="json">
        <param name="target">product</param>
      </result>
    </action>
    
    <action name="storeNewProduct" method="store" class="productAction">
      <result name="success" type="json">
        <param name="target">product</param>
      </result>
    </action>
    
    <action name="deleteProduct" method="delete" class="productAction">
	  <result name="success" type="httpheader">
	    <param name="status">200</param>
	  </result>
	</action>
	
	<action name="deleteProductForm">
      <result type="dispatcher">/WEB-INF/jsp/forms/deleteProductForm.jsp</result>
    </action>
    <!-- /Product actions -->
    

    
    <!-- Project actions -->
    <action name="createProject" method="create" class="projectAction">
      <result type="dispatcher">/WEB-INF/jsp/forms/createProject.jsp</result>
    </action>
    
    <action name="rankProjectAndMoveUnder" method="rankProject" class="projectAction">
      <result name="success" type="json">
        <param name="target">project</param>
      </result>
    </action>

    <action name="rankProjectAndMoveOver" method="rankOverProject" class="projectAction">
      <result name="success" type="json">
        <param name="target">project</param>
      </result>
    </action>

	<action name="unrankProject" method="unrankProject" class="projectAction">
      <result name="success" type="json">
        <param name="target">project</param>
      </result>
    </action>
    
    <action name="storeProject" method="store" class="projectAction">    
      <interceptor-ref name="prefetchStack"/>
      <result name="success" type="json">
        <param name="target">project</param>
        <param name="patterns">+assignees.id, +assignees.class, +assignees.initials, -assignees.*</param>
      </result>
    </action>

	<action name="deleteProject" method="delete" class="projectAction">
	  <result name="success" type="httpheader">
	    <param name="status">200</param>
	  </result>
	</action>
    
   <action name="storeNewProject" method="store" class="projectAction">    
      <result name="success" type="json">
        <param name="target">project</param>
        <param name="patterns">+assignees.id, +assignees.class, +assignees.initials, -assignees.*</param>
      </result>
    </action>
    
    <action name="projectData" class="projectAction" method="projectData">
      <result name="success" type="json">
        <param name="target">project</param>
        <param name="patterns">+assignees.id, +assignees.initials, +assignees.class, -assignees.*, +children.id, +children.class, +children.name, -children.*</param>
      </result>
    </action>
    
    <action name="projectLeafStories" class="storyListAction" method="projectLeafStories">
      <result name="success" type="json">
        <param name="target">stories</param>
        <param name="patterns">+responsibles.class, +responsibles.id, +responsibles.initials, -responsibles.*, +backlog.name, +backlog.class, +backlog.id, -backlog.*, +parent.id, +parent.name, +parent.class, -parent.*, -tasks, +labels.displayName, +labels.class, +labels.id, -labels.*</param>
      </result>
    </action>
    
    <action name="projectIterations" class="projectAction" method="iterationList">
      <result name="success" type="json">
        <param name="target">iterations</param>
        <param name="patterns">-tasks, -stories, +assignees.id, +assignees.class, +assignees.initials, -assignees.*</param>
      </result>
    </action>    
    
    <action name="projectMetrics" class="projectAction" method="projectMetrics">
      <result name="success" type="dispatcher">/WEB-INF/jsp/inc/projectMetrics.jsp</result>
    </action>
    
    <action name="rankProject" class="projectAction" method="moveToRanked">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    
    <action name="deleteProjectForm">
    	<result type="dispatcher">/WEB-INF/jsp/forms/deleteProjectForm.jsp</result>
    </action>
 
    <!-- /Project actions -->
    

    
    <!-- Iteration actions -->
    <action name="createIteration" method="create" class="iterationAction">
      <result type="dispatcher">/WEB-INF/jsp/forms/createIteration.jsp</result>
    </action>

    <action name="storeNewIteration" method="store" class="iterationAction">
      <result name="success" type="json">
        <param name="target">iteration</param>
        <param name="patterns">+assignees.id, +assignees.class, +assignees.initials, -assignees.*</param>
      </result>
    </action>
    
    <action name="storeIteration" method="store" class="iterationAction">
      <interceptor-ref name="prefetchStack"/>
      <result name="success" type="json">
        <param name="target">iteration</param>
        <param name="patterns">+assignees.id, +assignees.initials, +assignees.class, -assignees.*</param>
      </result>
    </action>
    
    <action name="retrieveIteration" class="iterationAction" method="retrieve">
      <result name="success" type="json">
        <param name="target">iteration</param>
      </result>
    </action>
    
    <action name="iterationData" class="iterationAction" method="fetchIterationData">
      <result name="success" type="json">
        <param name="target">iteration</param>
        <param name="patterns">-parent, -stories, -*.hourEntries, 
          +rankedStories, +rankedStories.tasks, 
          +rankedStories.parent.id, +rankedStories.parent.class, +rankedStories.parent.name, -rankedStories.parent.*, 
          +rankedStories.labels, -rankedStories.labels.creator, -rankedStories.backlog,
          +rankedStories.responsibles.id, +rankedStories.responsibles.initials, +rankedStories.responsibles.class, -rankedStories.responsibles.*, 
          +rankedStories.tasks.responsibles.id, +rankedStories.tasks.responsibles.initials, +rankedStories.tasks.responsibles.class, -rankedStories.tasks.responsibles.*, 
          +rankedStories.tasks.workingOnTask.user.id, +rankedStories.tasks.workingOnTask.user.initials, +rankedStories.tasks.workingOnTask.user.class, -rankedStories.tasks.workingOnTask.user.*, 
          +tasks.responsibles.id, +tasks.responsibles.initials, +tasks.responsibles.class, -tasks.responsibles.*, 
          +tasks.workingOnTask.user.id, +tasks.workingOnTask.user.initials, +tasks.workingOnTask.user.class, -tasks.workingOnTask.user.*, 
          +tasks, +assignees.id, +assignees.initials, +assignees.class, -assignees.*</param>
      </result>
    </action>
    
    <action name="iterationRowMetrics" class="iterationAction" method="iterationRowMetrics">
      <result name="success" type="dispatcher">/WEB-INF/jsp/inc/iterationRowMetrics.jsp</result>
    </action>
    
    <action name="iterationMetrics" class="iterationAction" method="iterationMetrics">
      <result name="success" type="dispatcher">/WEB-INF/jsp/inc/iterationMetrics.jsp</result>
    </action>
            
    <action name="dailyWorkData" class="dailyWorkAction" method="retrieve">
      <result name="success" type="json">
      	<param name="patterns">
          	+*.class,
            +stories.backlog.id, +stories.backlog.name, -stories.backlog.*,
            +stories.tasks, +stories.labels, +stories.parent.name, +stories.parent.id, -stories.parent.*,
            +queuedTasks, +queuedTasks.responsibles, +queuedTasks.story.id,
            +queuedTasks.story.name, +queuedTasks.story.backlog.id, +queuedTasks.story.backlog.name, -queuedTasks.story.backlog.*, -queuedTasks.story.*, 
            +queuedTasks.iteration.id, +queuedTasks.iteration.name, -queuedTasks.iteration*,
            +tasksWithoutStory.iteration.id, +tasksWithoutStory.iteration.name, -tasksWithoutStory.iteration.*,
            +*.workingOnTask, +*.workingOnTask.id, -*.workingOnTask.*,
            +*.responsibles, +*.responsibles.id, +*.responsibles.initials, -*.responsibles.*,
            +*.backlog.id, +*.backlog.name, -*.backlog.*,
            +*.parent.id, +*.parent.name, -*.parent.*
        </param>
      </result>
    </action>
    
    
    <action name="workQueue" class="dailyWorkAction" method="retrieveWorkQueue">
       <result name="success" type="json">
          <param name="target">queuedTasks</param>
          <param name="patterns">
              +*.class,
              +responsibles, +story.id,
              +story.name, -story.*, +story.backlog.id, +story.backlog.name, -story.backlog.*,
              +iteration.id, +iteration.name, -iteration.*,
              +*.workingOnTask, +*.workingOnTask.id, -*.workingOnTask.*,
              +*.responsibles, +*.responsibles.id, +*.responsibles.initials, -*.responsibles.*
        </param>
       </result>
      </action>
  
    <action name="dailyWorkStories" class="dailyWorkAction" method="retrieveAssignedStories">
      <result name="success" type="json">
        <param name="target">stories</param>
        <param name="patterns">
            +*.class,
            +backlog.id, +backlog.name, -backlog.*,
            +tasks, +labels, +parent.name, +parent.id, -parent.*,
            +*.workingOnTask, +*.workingOnTask.id, -*.workingOnTask.*,
            +*.responsibles, +*.responsibles.id, +*.responsibles.initials, -*.responsibles.*
        </param>        
      </result>
    </action>
  
    <action name="dailyWorkTasks" class="dailyWorkAction" method="retrieveAssignedTasks">
      <result name="success" type="json">
        <param name="target">tasksWithoutStory</param>
        <param name="patterns">
            +*.class,
            +tasksWithoutStory.iteration,
            +*.workingOnTask, +*.workingOnTask.id, -*.workingOnTask.*,
            +*.responsibles, +*.responsibles.id, +*.responsibles.initials, -*.responsibles.*
            +*.parent.id, +*.parent.name, -*.parent.*, -*.parent.responsibles,
            +*.iteration.id, +*.iteration.name, -*.iteration.*
        </param>        
      </result>
    </action>
  
    <action name="deleteIteration" method="delete" class="iterationAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    
    <action name="iterationAssignments" class="iterationAction" method="iterationAssignments">
      <result name="success" type="json">
        <param name="target">assignments</param>
        <param name="patterns">+user.initials</param>
      </result>
    </action>
    
    <action name="deleteIterationForm">
    	<result type="dispatcher">/WEB-INF/jsp/forms/deleteIterationForm.jsp</result>
    </action>
    
    <action name="deleteIteration" method="delete" class="iterationAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    
    <!-- /Iteration actions -->



    <!-- Story actions -->
    <action name="createStoryForm" method="execute" class="storyAction">
          <result type="dispatcher">/WEB-INF/jsp/forms/createStory.jsp</result>
    </action>
    
    <action name="createStory" method="create" class="storyAction">
      <result type="json">
        <param name="target">story</param>
        <param name="patterns">+responsibles</param>
      </result>
    </action>
    
    <action name="createStoryUnder" method="createStoryUnder" class="storyAction">
      <result type="json">
        <param name="target">story</param>
      </result>
    </action>
    
    <action name="createStorySibling" method="createStorySibling" class="storyAction">
      <result type="json">
        <param name="target">story</param>
      </result>
    </action>
    
    
    <action name="treeCreateRootStory" method="create" class="storyAction">
      <result type="dispatcher">/WEB-INF/jsp/fragments/storyTreePart.jsp</result>
    </action>
        
    <action name="treeCreateStoryUnder" method="createStoryUnder" class="storyAction">
      <result type="dispatcher">/WEB-INF/jsp/fragments/storyTreePart.jsp</result>
    </action>
    
   <action name="treeCreateStorySibling" method="createStorySibling" class="storyAction">
      <result type="dispatcher">/WEB-INF/jsp/fragments/storyTreePart.jsp</result>
    </action>
    
    <action name="storeStory" method="store" class="storyAction">
      <interceptor-ref name="prefetchStack"/>
      <result type="json">
        <param name="target">story</param>
        <param name="patterns">+responsibles, -rank</param>
      </result>
    </action>
    
    <action name="retrieveStory" method="retrieve" class="storyAction">
       <result type="json">
        <param name="target">story</param>
        <param name="patterns">+responsibles, -rank, +tasks, +children, -children.backlog.description, +parent, +labels,-labels.creator,-labels.timestamp</param>
       </result>
    </action>
    
    <action name="treeRetrieveStory" method="retrieve" class="storyAction">
       <result type="dispatcher">/WEB-INF/jsp/fragments/storyTreePart.jsp</result>
    </action>
    
    <action name="retrieveStoryMetrics" method="retrieve" class="storyAction">
       <result type="json">
        <param name="target">story</param>
        <param name="patterns">-rank, +metrics.*, +id, +class, -*</param>
       </result>
    </action>
    
    <action name="retrieveBranchMetrics" class="storyHierarchyAction" method="retrieveBranchMetrics">
      <result type="dispatcher">/WEB-INF/jsp/fragments/branchMetrics.jsp</result>
    </action>
        
    <action name="deleteStory" method="delete" class="storyAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    
    <action name="moveStoryUnder" method="moveStoryUnder" class="storyHierarchyAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
      <result name="error" type="json">
        <param name="out.statusCode">500</param>
        <param name="target">integrityErrors</param>
      </result>
    </action>
    
        
    <action name="moveStoryBefore" method="moveStoryBefore" class="storyHierarchyAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
      <result name="error" type="json">
        <param name="out.statusCode">500</param>
        <param name="target">integrityErrors</param>
      </result>
    </action>
    
        
    <action name="moveStoryAfter" method="moveStoryAfter" class="storyHierarchyAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
      <result name="error" type="json">
        <param name="out.statusCode">500</param>
        <param name="target">integrityErrors</param>
      </result>
    </action>
    
    <action name="moveStory" method="moveStory" class="storyAction">
      <result name="success" type="json">
        <param name="target">story</param>
      </result>
    </action>
    
    <action name="safeMoveSingleStory" method="safeMoveSingleStory" class="storyAction">
      <result name="success" type="json">
        <param name="target">story</param>
      </result>
    </action>
    
    <action name="moveStoryAndChildren" method="moveStoryAndChildren" class="storyAction">
      <result name="success" type="json">
        <param name="target">story</param>
      </result>
    </action>
    
    <action name="rankStoryOver" method="rankStoryOver" class="storyAction">
      <result name="success" type="json">
        <param name="target">story</param>
        <param name="patterns">-backlog, -parent</param>
      </result>
    </action>
    
    <action name="rankStoryUnder" method="rankStoryUnder" class="storyAction">
      <result name="success" type="json">
        <param name="target">story</param>
        <param name="patterns">-backlog, -parent</param>
      </result>
    </action>
    
    <action name="splitStory" method="split" class="storySplitAction">
      <interceptor-ref name="preparedStack" />
      <result name="success" type="json">
      </result>
    </action>
    
    <action name="splitTask" method="split" class="taskSplitAction">
      <interceptor-ref name="prefetchStack" />
      <result name="success" type="json">
      </result>
    </action>
    
    <action name="storyContents" method="storyContents" class="storyAction">
      <result name="success" type="json">
        <param name="target">storyContents</param>
      </result>
    </action>
    
    <action name="calculateStoryMetrics" method="metrics" class="storyAction">
      <result name="success" type="json">
        <param name="target">metrics</param>
      </result>
    </action>

    <action name="deleteStoryForm" method="deleteStoryForm" class="storyAction">
    	<result type="dispatcher">/WEB-INF/jsp/forms/deleteStoryForm.jsp</result>
    </action>
	
	<!-- /Story actions -->
	
	<!-- Label actions -->
	
	<action name="addStoryLabels" method="addStoryLabels" class="labelAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    
	<action name="deleteLabel" method="delete" class="labelAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    
		<action name="lookupLabels" method="lookupLabels" class="labelAction">
      <result name="success" type="json">
        <param name="target">labels</param>
        <param name="patterns">-creator,-timestamp</param>
      </result>
    </action>
    <!-- /Label actions -->
    
    



    <!-- Task actions -->
    <action name="deleteTask" method="delete" class="taskAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    
    <action name="storeTask" method="store" class="taskAction" >
      <interceptor-ref name="prefetchStack" />
      <result name="success" type="json">
        <param name="target">task</param>
        <param name="patterns">+responsibles</param>
      </result>
    </action>
    
    <action name="createTask" method="store" class="taskAction" >
      <result name="success" type="json">
        <param name="target">task</param>
        <param name="patterns">+responsibles</param>
      </result>
    </action>
    
    <action name="retrieveTask" method="retrieve" class="taskAction">
      <result name="success" type="json">
        <param name="target">task</param>
      </result>
    </action>
    
    <action name="moveTask" method="move" class="taskAction">
      <result name="success" type="json">
        <param name="target">task</param>
        <param name="patterns">
          +iteration
        </param>
      </result>
    </action>
   
    <action name="rankTaskAndMoveUnder" method="rankUnder" class="taskAction">
      <result name="success" type="json">
        <param name="target">task</param>
      </result>
    </action>
    
    <action name="resetOriginalEstimate" method="resetOriginalEstimate" class="taskAction">
      <result name="success" type="json">
        <param name="target">task</param>
      </result>
    </action>
    
    <action name="deleteTaskForm" method="deleteTaskForm" class="taskAction">
    	<result type="dispatcher">/WEB-INF/jsp/forms/deleteTaskForm.jsp</result>
    </action>
    
    <action name="getTaskContext" class="taskAction" method="getTaskContext">
	    <result type="dispatcher">/WEB-INF/jsp/inc/taskHierarchy.jsp</result>
	  </action>
    <!-- /Task actions -->

    <!-- Daily work actions -->
    <action name="addToWorkQueue" method="addToWorkQueue" class="dailyWorkAction">
      <result name="success" type="json">
        <param name="target">task</param>
        <param name="patterns">+*.responsibles, +*.workingOnTask</param>
      </result>
    </action>

    <action name="deleteFromWorkQueue" method="deleteFromWorkQueue" class="dailyWorkAction">
      <result name="success" type="json">
        <param name="target">task</param>
        <param name="patterns">+*.responsibles, +*.workingOnTask</param>
      </result>
    </action>

    <action name="rankDailyTaskAndMoveUnder" method="rankQueueTaskAndMoveUnder" class="dailyWorkAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    <!-- /Daily work actions -->


    <!-- User actions -->
    <action name="retrieveUser" method="retrieve" class="userAction">
      <result name="success" type="json">
        <param name="target">user</param>
        <param name="patterns">+teams</param>
      </result>
    </action>
    
    <action name="storeUser" method="store" class="userAction">
      <interceptor-ref name="prefetchStack" />
      <result name="success" type="json">
        <param name="target">user</param>
        <param name="patterns">+teams</param>
      </result>
    </action>
    
    <action name="storeNewUser" method="store" class="userAction">
      <result name="success" type="json">
        <param name="target">user</param>
      </result>
    </action>
    
    <action name="retrieveAllUsers" method="retrieveAll" class="userAction">
      <result name="success" type="json">
        <param name="target">users</param>
      </result>
    </action>
    
    <action name="isLoginNameUnique" method="checkLoginName" class="userAction">
      <result name="success" type="json">
        <param name="target">valid</param>
      </result>
    </action>
    <!-- /User actions -->



    <!-- Team actions -->
    <action name="createTeam" method="create" class="teamAction">
      <result type="dispatcher">/WEB-INF/jsp/forms/createTeam.jsp</result>
    </action>
    
    <action name="storeNewTeam" method="store" class="teamAction">   
      <result name="success" type="json">
        <param name="target">team</param>
      </result>
    </action>
    
    <action name="storeTeam" method="store" class="teamAction">  
      <interceptor-ref name="prefetchStack" />
      <result name="success" type="json">
        <param name="target">team</param>
        <param name="patterns">
          +users
        </param>
      </result>
    </action>
       
    <action name="retrieveAllTeams" method="retrieveAll" class="teamAction">
      <result name="success" type="json">
        <param name="target">teamList</param>
        <param name="patterns">+users</param>
      </result>
    </action>
    <!-- /Team actions -->
    
    <!-- Assigment actions -->
    
    <action name="modifyAssigment" method="modify" class="assignmentAction">
        <interceptor-ref name="prefetchStack" />
    	<result name="success" type="json">
    		<param name="target">assignment</param>
    	</result>
    </action>
    
    <action name="deleteAssignment" method="delete" class="assignmentAction">
      <result name="success" type="httpheader">
        <param name="status">200</param>
      </result>
    </action>
    
    <!-- /Assigment actions -->
    
    <!-- User load actions -->
    <action name="defaultUserLoad" method="retrieveUserLoad" class="userLoadAction">
    	<result name="success" type="json">
    		<param name="target">userLoadData</param>
    	</result>
    </action>
    
    <action name="userLoadLimits" method="dailyLoadLimits" class="userLoadAction">
      <result name="success" type="json">
        <param name="target">loadLimits</param>
      </result>
    </action>
    <!-- /User load actions -->

	<!-- Utility actions -->
	<action name="userChooserData" class="autocompleteAction" method="userTeamData">
		<result name="success" type="json">
			<param name="target">autocompleteData</param>
			<param name="patterns">-class</param>
		</result>
	</action>
	<action name="teamChooserData" class="autocompleteAction" method="teamData">
    <result name="success" type="json">
      <param name="target">autocompleteData</param>
      <param name="patterns">-class</param>
    </result>
  </action>
	<action name="backlogChooserData" class="autocompleteAction" method="backlogData">
		<result name="success" type="json">
			<param name="target">autocompleteData</param>
			<param name="patterns">-class</param>
		</result>
	</action>
	<action name="productChooserData" class="autocompleteAction" method="productData">
    <result name="success" type="json">
      <param name="target">autocompleteData</param>
      <param name="patterns">-class</param>
    </result>
  </action>
  <action name="projectChooserData" class="autocompleteAction" method="projectData">
    <result name="success" type="json">
      <param name="target">autocompleteData</param>
      <param name="patterns">-class</param>
    </result>
  </action>
	<action name="currentIterationChooserData" class="autocompleteAction"
		method="currentIterationData">
		<result name="success" type="json">
			<param name="target">autocompleteData</param>
			<param name="patterns">-class</param>
		</result>
	</action>
	<!-- /Utility actions -->
	
	
		<!-- Dev portfolio -->
		<action name="projectPortfolioData" class="projectPortfolioAction" method="portfolioData">
    	<result name="success" type="json">
	      <param name="target">portfolioData</param>
	      <param name="patterns">-class,+rankedProjects.assignees,+unrankedProjects.assignees</param>
    	</result>
		</action>
		<!-- /Dev portfolio -->

	<!-- Story hierarchy -->
	<action name="getStoryHierarchy" class="storyHierarchyAction" method="recurseHierarchyAsList">
    <result type="dispatcher">/WEB-INF/jsp/inc/storyHierarchy.jsp</result>
	</action>
	
	<action name="getProjectStoryTree" class="storyHierarchyAction" method="retrieveProjectRootStories">
    <result type="dispatcher">/WEB-INF/jsp/fragments/storyTree.jsp</result>
  </action>

	<action name="getProductStoryTree" class="storyHierarchyAction" method="retrieveProductRootStories">
    <result type="dispatcher">/WEB-INF/jsp/fragments/storyTree.jsp</result>
  </action>
	<!-- /Story hierarchy -->
	
	<!-- Story tree integrity -->
	<action name="checkChangeBacklog" class="storyTreeIntegrityAction" method="checkChangeBacklog">
	 <result name="success" type="dispatcher">/WEB-INF/jsp/forms/checkStoryMove.jsp</result>
	 <result name="fatalConstraint" type="dispatcher">/WEB-INF/jsp/forms/checkStoryMove.jsp</result>
	</action>
	
	<action name="checkChangeParentStory" class="storyTreeIntegrityAction" method="checkChangeParentStory">
   <result name="success" type="dispatcher">/WEB-INF/jsp/forms/checkStoryParentChange.jsp</result>
  </action>
  
  <action name="getSuggestionContent" class="storyTreeIntegrityAction">
    <result name="success" type="dispatcher">/WEB-INF/jsp/forms/moveOptions/moveOption_moveStoryOnly.jsp</result>
  </action>
	<!-- /Story tree integrity -->
	
	<!-- timesheets -->
  
    <action name="hourEntriesByUserAndDay" class="spentEffortAction" method="getHourEntriesByUserAndDay">
      <result type="json">
        <param name="target">effortEntries</param>
        <param name="patterns">+*.class,-user,+id,+description,+date,+minutesSpent,
        +task.id, +task.name, +task.story.id, +task.story.name, +task.story.backlog.id, +task.story.backlog.name,
        +task.iteration.id, +task.iteration.name,
        +story.id, +story.name, +story.backlog.id, +story.backlog.name,
        +backlog.id, +backlog.name,
        -*</param>
      </result>
    </action>
  
	<action name="logBacklogEffort" class="hourEntryAction" method="logBacklogEffort">
	 <result name="success" type="httpheader">
	   <param name="status">200</param>
	 </result>
	</action>
	<action name="logStoryEffort" class="hourEntryAction" method="logStoryEffort">
	 <result name="success" type="httpheader">
	   <param name="status">200</param>
	 </result>
	</action>
	<action name="logTaskEffort" class="hourEntryAction" method="logTaskEffort">
	 <result name="success" type="httpheader">
	   <param name="status">200</param>
	 </result>
	</action>
	<action name="storeEffortEntry" class="hourEntryAction" method="store">
   <interceptor-ref name="prefetchStack" />
	 <result name="success" type="json">
	   <param name="target">hourEntry</param>
	 </result>
	</action>
	<action name="retrieveTaskHourEntries" class="hourEntryAction" method="retrieveTaskHourEntries">
    <result name="success" type="json">
      <param name="target">hourEntries</param>
    </result>
	</action>
	<action name="retrieveStoryHourEntries" class="hourEntryAction" method="retrieveStoryHourEntries">
    <result name="success" type="json">
      <param name="target">hourEntries</param>
    </result>
	</action>
	<action name="retrieveBacklogHourEntries" class="hourEntryAction" method="retrieveBacklogHourEntries">
    <result name="success" type="json">
      <param name="target">hourEntries</param>
    </result>
	</action>
	<action name="deleteHourEntry" class="hourEntryAction" method="delete">
	 <result name="success" type="httpheader">
	   <param name="status">200</param>
	 </result>
	</action>
	<!-- /timesheets -->
	

  </package>
  
</struts>
