package fi.hut.soberit.agilefant.web;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionSupport;

import fi.hut.soberit.agilefant.business.TeamBusiness;
import fi.hut.soberit.agilefant.business.UserBusiness;
import fi.hut.soberit.agilefant.model.Team;
import fi.hut.soberit.agilefant.model.User;

@Component("teamAction")
@Scope("prototype")
public class TeamAction extends ActionSupport implements CRUDAction {

    private static final long serialVersionUID = -3334278151418035144L;

    private int teamId;

    private Team team;

    @Autowired
    private TeamBusiness teamBusiness;

    @Autowired
    private UserBusiness userBusiness;

    private Map<Integer, String> userIds = new HashMap<Integer, String>();

    private List<Team> teamList = new ArrayList<Team>();

    private String jsonData = "";

    /**
     * Create a new team.
     */
    public String create() {
        teamId = 0;
        team = new Team();
        team.setUsers(new ArrayList<User>());
        return Action.SUCCESS;
    }

    public String list() {
        teamList.addAll(teamBusiness.retrieveAll());
        return Action.SUCCESS;
    }

    /**
     * Delete an existing team.
     */
    public String delete() {
        teamBusiness.delete(teamId);
        return Action.SUCCESS;
    }

    /**
     * Edit a team.
     */
    public String edit() {
        team = teamBusiness.retrieveIfExists(teamId);
        if (team == null) {
            super.addActionError("Team not found!");
            return Action.ERROR;
        }
        return Action.SUCCESS;
    }

    /**
     * Store the team.
     */
    public String store() {
        Team storable = new Team();
        if (teamId > 0) {
            storable = teamBusiness.retrieveIfExists(teamId);
            if (storable == null) {
                super.addActionError("Team not found!");
                return Action.ERROR;
            }
        }

        // Fill the storable element
        fillStorable(storable);

        // Check, if action has errors.
        if (super.hasActionErrors()) {
            return Action.ERROR;
        }
        teamBusiness.store(storable);
        return Action.SUCCESS;
    }

    public String ajaxStoreTeam() {
        Team storable = new Team();
        if (teamId > 0) {
            storable = teamBusiness.retrieve(teamId);
            if (storable == null) {
                super.addActionError("Team not found!");
                return CRUDAction.AJAX_ERROR;
            }
        }

        // Fill the storable element
        fillStorable(storable);

        // Check, if action has errors.
        if (super.hasActionErrors()) {
            return CRUDAction.AJAX_ERROR;
        }
        teamBusiness.store(storable);
        return CRUDAction.AJAX_SUCCESS;
    }

    protected void fillStorable(Team storable) {
        storable.setDescription(team.getDescription());

        // Check that the name is valid
        if (team.getName() == null || team.getName().length() == 0
                || team.getName().trim().compareTo("") == 0) {
            super.addActionError("The team name can't be empty.");
            return;
        }
        storable.setName(team.getName());

        // Set the users
        Collection<User> users = new ArrayList<User>();

        for (Integer uid : userIds.keySet()) {
            users.add(userBusiness.retrieve(uid));
        }

        storable.setUsers(users);
    }

    public String getTeamJSON() {
        if (teamId > 0) {
            jsonData = teamBusiness.retrieveJSON(teamId);
        } else {
            jsonData = teamBusiness.retrieveAllAsJSON();
        }
        return Action.SUCCESS;
    }

    /*
     * List of autogenerated setters and getters
     */

    /**
     * @return the teamId
     */
    public int getTeamId() {
        return teamId;
    }

    /**
     * @param teamId
     *            the teamId to set
     */
    public void setTeamId(int teamId) {
        this.teamId = teamId;
    }

    /**
     * @return the team
     */
    public Team getTeam() {
        return team;
    }

    /**
     * @param team
     *            the team to set
     */
    public void setTeam(Team team) {
        this.team = team;
    }

    public Map<Integer, String> getUserIds() {
        return userIds;
    }

    public void setUserIds(Map<Integer, String> userIds) {
        this.userIds = userIds;
    }

    public List<Team> getTeamList() {
        return teamList;
    }

    public void setTeamList(List<Team> teamList) {
        this.teamList = teamList;
    }

    public void setTeamBusiness(TeamBusiness teamBusiness) {
        this.teamBusiness = teamBusiness;
    }

    public String getJsonData() {
        return jsonData;
    }

    public void setJsonData(String jsonData) {
        this.jsonData = jsonData;
    }

    public void setUserBusiness(UserBusiness userBusiness) {
        this.userBusiness = userBusiness;
    }

}
